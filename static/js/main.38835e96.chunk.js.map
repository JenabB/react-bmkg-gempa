{"version":3,"sources":["BMKG.js","Layout.js","App.js","index.js"],"names":["BMKG","state","data","xmlParser","xml2js","Parser","explicitArray","axios","get","response","parseStringPromise","parsedXml","gempa","Infogempa","this","setState","console","error","log","className","Card","CardActionArea","src","alt","CardContent","Typography","variant","component","Tanggal","gutterBottom","Potensi","color","Jam","Wilayah1","Wilayah2","Wilayah3","class","Magnitude","Kedalaman","React","Component","useStyles","makeStyles","theme","root","flexGrow","Layout","classes","Grid","container","spacing","direction","alignItems","justify","item","xs","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8ZAyGeA,E,4MAtFbC,MAAQ,CACNC,KAAM,I,+LAIAC,EAAY,IAAIC,IAAOC,OAAO,CAKlCC,eAAe,I,kBAGQC,IAAMC,IAC3B,wCACA,CACE,eAAgB,qB,cAHdC,E,gBAWkBN,EAAUO,mBAAmBD,EAASP,M,OAAxDS,E,OAGSC,EACXD,EADFE,UAAaD,MAGfE,KAAKC,SAAS,CAAEb,KAAMU,I,kDAEtBI,QAAQC,MAAM,QAAd,M,+IAIM,IACAf,EAASY,KAAKb,MAAdC,KAGR,OAFAc,QAAQE,IAAI,OAAQhB,GAGlB,yBAAKiB,UAAU,iBACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,iBACd,kBAACE,EAAA,EAAD,KACE,yBACEF,UAAU,eACVG,IAAI,oCACJC,IAAI,qBAEN,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEN,UAAU,eACVO,QAAQ,QACRC,UAAU,KAETzB,EAAK0B,SAER,kBAACH,EAAA,EAAD,CACEN,UAAU,YACVU,cAAY,EACZH,QAAQ,KACRC,UAAU,MAETzB,EAAK4B,SAGR,kBAACL,EAAA,EAAD,CAAYC,QAAQ,QAAQK,MAAM,gBAAgBJ,UAAU,KACzDzB,EAAK8B,KAER,yBAAKb,UAAU,oBACb,uBAAGA,UAAU,WAAWjB,EAAK+B,UAC7B,uBAAGd,UAAU,WAAWjB,EAAKgC,UAC7B,uBAAGf,UAAU,WAAWjB,EAAKiC,aAInC,yBAAKC,MAAM,kBACT,6BAAMlC,EAAKmC,WACX,6BAAMnC,EAAKoC,kB,GA/EJC,IAAMC,WCZnBC,G,OAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,QAIC,SAASC,IACtB,IAAMC,EAAUN,IAEhB,OACE,yBAAKtB,UAAW4B,EAAQH,MACtB,kBAACI,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,UAER,kBAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIpC,UAAU,cAC3B,kBAAC,EAAD,S,OCbKqC,MARf,WACE,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,QCFNsC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.38835e96.chunk.js","sourcesContent":["// Showing XML Data.\n// Based on this tutorial:\n// https://www.pluralsight.com/guides/how-to-display-xml-data-using-reactjs?fbclid=IwAR2ZHWSvbR6O7HsrwEeiQb7QTFyEEocrWfrYnQlsDUhotu91YrQ9a3snW1M\nimport React from \"react\";\nimport axios from \"axios\";\n// Library yang digunakan untuk parsing xml menjadi object\nimport xml2js from \"xml2js\";\nimport \"./BMKG.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// NOTE : Pada artikel diatas, data dari contoh pertama sepertinya sudah di-parse\n// oleh server menjadi object jadi kita tinggal menampilkan datanya saja.\n// Data dari contoh kodingan ini hasilnya masih berupa string xml dan harus kita\n// ubah terlebih dahulu.\n\nclass BMKG extends React.Component {\n  state = {\n    data: {},\n  };\n\n  async componentDidMount() {\n    const xmlParser = new xml2js.Parser({\n      // Konfigurasi ini digunakan untuk mencegah hasil parsing\n      // diubah menjadi array\n      // Untuk info lebih lanjut, silahkan pelajari dokumentasi:\n      // https://github.com/Leonidas-from-XIV/node-xml2js#options\n      explicitArray: false,\n    });\n    try {\n      const response = await axios.get(\n        \"https://data.bmkg.go.id/autogempa.xml\",\n        {\n          \"Content-Type\": \"application/xml;\",\n        }\n      );\n      // karena hasil xml belum di-parsing oleh server kita harus\n      // melakukan parsing-nya di client-side.\n      // Untuk mencegah terjadinya race condition kita bisa mengggunakan\n      // fitur parseStringPromise();\n      // https://github.com/Leonidas-from-XIV/node-xml2js#promise-usage\n      const parsedXml = await xmlParser.parseStringPromise(response.data);\n      // destructuring: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n      const {\n        Infogempa: { gempa },\n      } = parsedXml;\n      // setelah parsing berhasil, hasilnya akan kita simpan di state\n      this.setState({ data: gempa });\n    } catch (error) {\n      console.error(\"error\", error);\n    }\n  }\n\n  render() {\n    const { data } = this.state;\n    console.log(\"data\", data);\n    // Tampilkan data...\n    return (\n      <div className=\"containerBMKG\">\n        <Card className=\"cardContainer\">\n          <CardActionArea>\n            <img\n              className=\"gambar-gempa\"\n              src=\"https://data.bmkg.go.id/eqmap.gif\"\n              alt=\"Girl in a jacket\"\n            />\n            <CardContent>\n              <Typography\n                className=\"tanggalGempa\"\n                variant=\"body2\"\n                component=\"p\"\n              >\n                {data.Tanggal}\n              </Typography>\n              <Typography\n                className=\"titleCard\"\n                gutterBottom\n                variant=\"h5\"\n                component=\"h2\"\n              >\n                {data.Potensi}\n              </Typography>\n\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {data.Jam}\n              </Typography>\n              <div className=\"wilayahContainer\">\n                <p className=\"wilayah\">{data.Wilayah1}</p>\n                <p className=\"wilayah\">{data.Wilayah2}</p>\n                <p className=\"wilayah\">{data.Wilayah3}</p>\n              </div>\n            </CardContent>\n          </CardActionArea>\n          <div class=\"flex-container\">\n            <div>{data.Magnitude}</div>\n            <div>{data.Kedalaman}</div>\n          </div>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default BMKG;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport BMKG from \"./BMKG.js\";\nimport \"./Layout.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function Layout() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Grid\n        container\n        spacing={3}\n        direction=\"column\"\n        alignItems=\"center\"\n        justify=\"center\"\n      >\n        <Grid item xs={12} className=\"gridHeader\">\n          <BMKG />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Layout from \"./Layout.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}